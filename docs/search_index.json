[
["tuning.html", "Chapter 7 Tuning 7.1 Overview 7.2 Configuring 7.3 Partitioning 7.4 Caching 7.5 Shuffling 7.6 Troubleshooting 7.7 Recap", " Chapter 7 Tuning Previous chapters focused on installing, using and connecting to Spark clusters, we’ve assumed so far that computation in a Spark cluster works. While this is true in many cases, it is often required to have some knowledge of how Spark internally. This with the purpose of tunning resources and operations to run larger datasets in Spark. This chapter will explain how Spark works and provide details on how to tune its operations. 7.1 Overview Spark performs distributed computation by: configuring cluster resources and partitioning, executing, shuffling and caching data across many machines: Configuring means asking the cluster manager how many machines, memory, CPUs, etc. will be needed. Partitioning means splitting data among various machines, partitions can be either implicit or explicit. Executing means running an arbitrary transformation over each partition. Shuffling redistributes data when data to the correct machine. Caching preserves data in-memory across other computation cycles. The following diagram shows an example on how sorting would conceptually work across a cluster of machines. First, Spark would configure the cluster to use three worker machines. In this example, the numbers 1-9 are partitioned across three storage instances. Since the data is already partitioned, each worker node loads this implicit partition; for instance, 4,9,1 is loaded in the first worker node. Afterwards, a custom transformation is applied to each partition in each worker node, this is denoted by f(x) in the diagram bellow. In this example, f(x) executes a sorting operation over the numbers within a partition. Since Spark is general, execution over a partition can be as simple or sophisticated as needed. Once the execution completes, the result is shuffled to the right machine to finish the sorting operation across the entire dataset. Finally, once the data is sorted across the cluster, the sorted results can be optionally cached in memory to avoid rerunning this computation multiple times. FIGURE 7.1: Spark Overview Notice that while the diagram above describes a sorting operation, a similar approach applies to filtering or joining datasets and analyzing and modeling data at scale. Spark provides support to perform custom partitions, custom shuffling, etc; however, these lower level operations are not exposed in sparklyr since they are provided by the data analysis tools like dplyr or DBI. However, one can always use the Spark’s Scala API or run custom R code as the extensions chapter will describe. 7.2 Configuring When tuning a Spark application, consider defining a configuration specification to describe the resources your application needs to successfully need at scale. Some of the most obvious resources you would want to define are: Number of workers. This is somewhat equivalent to number the number of CPUs you are requesting. Memory per worker. Notice that some of these settings are different between clusters and therefore, one often needs to research online what each cluster manager expects to configure Spark properly. To list all the default settings, we can run the following: config &lt;- spark_config() sc &lt;- spark_connect(master = &quot;local&quot;) spark_context_config(sc) spark_session_config(sc) See also: [https://spark.apache.org/docs/latest/configuration.html]. 7.3 Partitioning 7.3.1 Implicit 7.3.2 Explicit library(sparklyr) library(dplyr) sc &lt;- spark_connect(master = &quot;local&quot;) A first attempt to sort a large dataset in Spark would be to run: # Attempt to sort 20 GB dataset in disk with one billion entries sdf_len(sc, 10^9) %&gt;% mutate(x = rand()) %&gt;% arrange(x) %&gt;% spark_write_csv(&quot;billion.csv&quot;) However, since each partition needs to fit in memory in Spark, the code above will result in an OutOfMemory exception that shuts down Spark completely. Instead, we can explicitly partition the data into chunks that would fit in the default memory configureation by explicitly defining the total number of partitions to use with the repartition parameter set to 10,000 as follows: library(sparklyr) library(dplyr) sc &lt;- spark_connect(master = &quot;local&quot;) # Sort 20 GB dataset in disk with one billion entries sdf_len(sc, 10^9, repartition = 10^4) %&gt;% mutate(x = rand()) %&gt;% arrange(x) %&gt;% spark_write_csv(&quot;billion.csv&quot;) 7.4 Caching From the introduction chapter, we know that Spark was designed to be faster than it’s predecesors by using memory instead of disk to store data, this is formally known as an Spark RDD and stands for resilient distributed dataset. An RDD is resilient by duplicating copies of the same data across many machines, such that, if one machine fails other can complete the task. Resiliency is important in distributed systems since, while things will usually work in one machine, when running over thousands of machines the likelyhood of something failing is much higher; when a failure happens, it is prefferable be fault tolerant to avoid loosing the work of all the other machines. RDDs are fault tolerant by tracking data lineage information to rebuild lost data automatically on failure. In sparklyr, you can control when an RDD gets loaded or unloaded from memory using tbl_cache() and tbl_uncache(). Most sparklyr operations that retrieve a Spark data frame, cache the results in-memory, for instance, running spark_read_parquet() or sdf_copy_to() will provide a Spark dataframe that is already cached in-memory. As a Spark data frame, this object can be used in most sparklyr functions, including data analysis with dplyr or machine learning. library(sparklyr) sc &lt;- spark_connect(master = &quot;local&quot;) iris_tbl &lt;- sdf_copy_to(sc, iris, overwrite = TRUE) You can inspect which tables are cached by navigating to the Spark UI using spark_web(sc), opening the storage tab, and clicking on a given RDD: FIGURE 7.2: Cached RDD in Spark Web Interface. Data loaded in memory will be released when the R session terminates either explicitly or implicitly with a restart or disconnection; however, to free up resources, you can use tbl_uncache(): tbl_uncache(sc, &quot;iris&quot;) 7.4.1 Memory Memory in Spark is categorized into: reserved, user, excecution or storage. As part of tuning execution, you can consider tweaking the amount of memory allocated for user, execution and storage by creating a Spark connection with different values that the defaults provided in Spark: config &lt;- spark_config() # define memory available for storage and excecution config$spark.memory.fraction &lt;- 0.75 # define memory available for storage config$spark.memory.storageFraction &lt;- 0.5 For instance, if you want to use Spark to store large amounts of data in-memory with the purpuse of filtering and retrieving subsets quickly, you can expect Spark to use little execution or user memoty; therefore, to maximize storage memory, one can tune Spark as follows: config &lt;- spark_config() # define memory available for storage and excecution config$spark.memory.fraction &lt;- 0.90 # define memory available for storage config$spark.memory.storageFraction &lt;- 0.90 7.5 Shuffling 7.6 Troubleshooting 7.6.1 Graph Visualization FIGURE 7.3: Spark Graph Visualization 7.6.2 Event Timeline One of the best ways to tune your Spark jobs is to use the Spark’s web interface, click on the job being diagnosed, then the stage and then expand the event timeline. Lets the take a look at the event timeline for the ordering a data frame by a given column using three partitions: spark_connect(master = &quot;local&quot;) %&gt;% copy_to(iris, repartition = 3) %&gt;% arrange(Sepal_Width) FIGURE 7.4: Spark Event Timeline 7.6.3 Checkpointing When performing expensive computations, it can make sense to checkpoint your data. Meaning, you save the intermediate result to a distributed file system like HDFS. You can checkpoint explicitly by saving to CSV, Parquet, etc. files. Or let Spark checkpoint this for you using sdf_checkpoint() in sparklyr as follows. Notice that checkpointing truncates the computation lineage graph which can speed up performance if the same intermediate result is used multiple times. 7.7 Recap "]
]
